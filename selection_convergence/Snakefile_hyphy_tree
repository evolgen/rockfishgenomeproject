#!/usr/bin/env python3


SAMPLES, = glob_wildcards("select_sequence_files/{sample}/REVISE/ALN.CDS.trimall.FAS")

rule all:
    input:
        expand("select_sequence_files/{sample}/revise_tree.done", sample=SAMPLES)

rule tree_create:
    input:
        plog = "select_sequence_files/{sample}/REVISE/ALN.CDS.trimraw.FAS",
        species_tree = "species_tree.nwk",
    output:
        logger = "select_sequence_files/{sample}/revise_tree.done",
    params:
        slurm_opts=lambda wildcards: "-N1 " \
                                     "--time 3-00:00:00 " \
                                    "-A co_genomicdata " \
                                     "--qos=savio_lowprio " \
                                     "-p savio,savio2,savio3,savio2_htc,savio3_bigmem,savio2_bigmem,savio_bigmem " \
                                     "-J rec_{sample} " \
                                     .format(sample=wildcards.sample)
    run:
        shell("""
            printf "  Starting tree for - {sample} \n";
            cd select_sequence_files/{sample}/REVISE/ ;
	    samtools faidx aln.cds.out.trimall.fasta ;
            Rscript speciestree_convert.R \
                    {species_tree} aln.cds.out.trimall.fasta.fai ALN.cds.raw.tree ;
            bash edit_tree_longliving.sh ALN.cds.raw.tree >ALN.cds.raw.tree.long ;
            bash edit_tree_shortliving.sh ALN.cds.raw.tree >ALN.cds.raw.tree.short ;
            echo "" > {logger} ;
            """.format(plog=input.plog, logger=output.logger, sample=wildcards.sample, species_tree = input.species_tree))



