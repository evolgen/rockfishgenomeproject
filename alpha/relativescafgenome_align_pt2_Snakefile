#!python

#!/usr/bin/env python3
import os
import sys
from glob import glob
from snakemake.utils import read_job_properties
import pdb

configfile:"config.itemized.withpball.withillumina.json"
genome_dir = "/global/scratch2/rohitkolora/Rockfish/Genomes/FREEZE"
out_dir = "/global/scratch/gregoryowens/sebastes/snp_calling"
bam_dir = "/global/scratch2/rohitkolora/Rockfish/Data/Greg/snp_calling"

def get_inputs(wildcards):
    inputs = []
    pattern = "{bam_dir}/{reference_species}_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.vcf.gz"
    mask = "/global/scratch/gregoryowens/sebastes/snp_calling/{reference_species}_scaffolded/{species1}/k50-2_5bp_negativemask.bed"
    for smp in config["SAMPLES"]:
        species1, sample1 = smp.split("/")
        fn = "species_scaffold_list.txt"
        index_file=open(fn,"r")
        lines=index_file.readlines()
        for line in lines:
            species=line.split('\t')[0]
            sample=line.split('\t')[1]
            reference_full=line.split('\t')[2]
            reference_species = reference_full.split('_')[1].rstrip()
            if sample1 == sample:
               inputs.append(mask.format(reference_species=reference_species, species1=species1))
               fai = "/global/scratch2/rohitkolora/Rockfish/Data/Greg/snp_calling/{reference_species}_scaffolded/{species1}/referencegenome.fasta.fai".format(species1=species1,reference_species=reference_species)
               fai_file=open(fai,"r")
               fai_lines=fai_file.readlines()
               for names in fai_lines:
                   chroms=names.split('\t')[0]
                   length=names.split('\t')[1]
                   if int(length) >= 1000000:
                    inputs.append(pattern.format(species1=species1, 
                        smp=smp,  sample1=sample1, bam_dir=bam_dir, chr=chroms,reference_species=reference_species))
            index_file.close() 
            fai_file.close()

    return inputs

rule all:
    input:
        get_inputs


rule realign:
    input:
        bam="{bam_dir}/{reference_species}_scaffolded/{species1}/Illumina/map.{species1}.{sample1}.bam",
    output:
        chr_bam=temp("{bam_dir}/{reference_species}_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.bam"),
        chr_bam_2=temp("{bam_dir}/{reference_species}_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.rg.bam"),
        chr_bam_3=temp("{bam_dir}/{reference_species}_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.rg.dedup.bam"),
        chr_bam_4="{bam_dir}/{reference_species}_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.rg.dedup.ir.bam",
        realigned_bai="{bam_dir}/{reference_species}_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.rg.dedup.ir.bai",
        intervals="{bam_dir}/{reference_species}_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.intervals",
        done_realign="{bam_dir}/{reference_species}_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.donerealign",
    params:
        slurm_opts=lambda wildcards: "-N1 " \
                                     "--time 12:00:00 " \
                                    "-A co_genomicdata " \
                                     "--qos=savio_lowprio " \
                                     "-p savio " \
                                     "-o {out_dir}/logs/realign_{sample1}_{chr}.log " \
                                     "-J {sample1}_realign " \
                                     .format(sample1=wildcards.sample1, out_dir=out_dir, chr=wildcards.chr)
    run:
        shell("""
            module load java;
            module load samtools;
            samtools view -@ 20 -b {bam} -o {chr_bam} {chr};
            samtools index -@ 20 {chr_bam};
            /global/scratch/gregoryowens/sebastes/bin/gatk-4.1.7.0/gatk AddOrReplaceReadGroups -I {chr_bam} -O {chr_bam_2} -LB {sample1} -PL Illumina -PU TMP -SM {sample1};
            samtools index -@ 20 {chr_bam_2};
            java -jar /global/scratch/gregoryowens/sebastes/bin/picard.jar MarkDuplicates I={chr_bam_2} O={chr_bam_3} M={chr_bam_3}.info;
            samtools index -@ 20 {chr_bam_3};
            java -jar /global/scratch/gregoryowens/sebastes/bin/GenomeAnalysisTK-3.8-1-0-gf15c1c3ef/GenomeAnalysisTK.jar -T RealignerTargetCreator -R /global/scratch2/rohitkolora/Rockfish/Data/Greg/snp_calling/{reference_species}_scaffolded/{species1}/referencegenome.fasta -I {chr_bam_3} -o {intervals} -nt 20;
            java -jar /global/scratch/gregoryowens/sebastes/bin/GenomeAnalysisTK-3.8-1-0-gf15c1c3ef/GenomeAnalysisTK.jar -T IndelRealigner -R /global/scratch2/rohitkolora/Rockfish/Data/Greg/snp_calling/{reference_species}_scaffolded/{species1}/referencegenome.fasta -I {chr_bam_3} -o {chr_bam_4} -targetIntervals {intervals} ;
            samtools index -@ 20 {chr_bam_4};
            echo "done" > {done_realign};
            """.format(bam=input.bam, intervals=output.intervals,
                       done_realign=output.done_realign,
                       sample1=wildcards.sample1, chr=wildcards.chr, species1=wildcards.species1, 
                       chr_bam=output.chr_bam, chr_bam_2=output.chr_bam_2,
                       chr_bam_3=output.chr_bam_3, chr_bam_4=output.chr_bam_4, reference_species=wildcards.reference_species ))


rule call_variants:
    input:
        in_bam="{bam_dir}/{reference_species}_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.rg.dedup.ir.bam",
        mask_1="/global/scratch/gregoryowens/sebastes/snp_calling/{reference_species}_scaffolded/{species1}/k50-2_50bp_negativemask.bed",
    output:
        out_mask="{bam_dir}/{reference_species}_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.mask.bed.gz",
        out_vcf="{bam_dir}/{reference_species}_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.vcf.gz",
    params:
        slurm_opts=lambda wildcards: "-N1 " \
                                     "--time 24:00:00 " \
                                    "-A co_genomicdata " \
                                     "--qos=savio_lowprio " \
                                     "-p savio " \
                                     "-o {out_dir}/logs/callvariants_alu_{sp1}_{chr}.log " \
                                     "-J {sp1}_format " \
                                     .format(sp1=wildcards.species1, out_dir=out_dir, chr=wildcards.chr)
    run:
        shell("""
            module load samtools; module load bcftools;
            TOTAL_READS=$(samtools view {in_bam} | wc -l);
            if [ $TOTAL_READS -lt 2000 ]
            then 
            touch {out_mask}
            touch {out_vcf}
            else
            DEPTH=$(samtools depth {in_bam} | perl /global/scratch/gregoryowens/sebastes/bin/average_column.pl 3)
            /global/scratch/gregoryowens/sebastes/bin/bcftools-1.10.2/bcftools mpileup -B -q 20 -Q 20 -C 50 -O b -f /global/scratch2/rohitkolora/Rockfish/Data/Greg/snp_calling/{reference_species}_scaffolded/{species1}/referencegenome.fasta {in_bam} | /global/scratch/gregoryowens/sebastes/bin/bcftools-1.10.2/bcftools call -c -V indels | /global/scratch/gregoryowens/sebastes/bin/msmc-tools/bamCaller.py $DEPTH {out_mask} | gzip -c > {out_vcf};
            fi
            """.format(in_bam=input.in_bam, species1=wildcards.species1, reference_species=wildcards.reference_species,
                       out_mask=output.out_mask, sample1=wildcards.sample1, chr=wildcards.chr, 
                       out_vcf=output.out_vcf, out_dir=out_dir,))

rule mappability:
    input:
        reference="/global/scratch2/rohitkolora/Rockfish/Data/Greg/snp_calling/{reference_species}_scaffolded/{species1}/referencegenome.fasta",
    output:
        mask_1="/global/scratch/gregoryowens/sebastes/snp_calling/{reference_species}_scaffolded/{species1}/k50-2_50bp_negativemask.bed",
        mask_2="/global/scratch/gregoryowens/sebastes/snp_calling/{reference_species}_scaffolded/{species1}/k50-2_100bp_negativemask.bed",
        mask_3="/global/scratch/gregoryowens/sebastes/snp_calling/{reference_species}_scaffolded/{species1}/k50-2_5bp_negativemask.bed",
    params:
        slurm_opts=lambda wildcards: "-N1 " \
                                     "--time 20:00:00 " \
                                    "-A co_genomicdata " \
                                     "--qos=savio_lowprio " \
                                     "-p savio " \
                                     "-o {out_dir}/logs/mappability_{sp1}.log " \
                                     "-J {sp1} " \
                                     .format(sp1=wildcards.species1, out_dir=out_dir)
    run:
        shell("""
            rm -r -f /global/scratch/gregoryowens/sebastes/snp_calling/{reference_species}_scaffolded/{species1}/genmap;
            /global/scratch/gregoryowens/sebastes/bin/genmap index -F /global/scratch2/rohitkolora/Rockfish/Data/Greg/snp_calling/{reference_species}_scaffolded/{species1}/referencegenome.fasta -I /global/scratch/gregoryowens/sebastes/snp_calling/{reference_species}_scaffolded/{species1}/genmap;
            /global/scratch/gregoryowens/sebastes/bin/genmap map -K 50 -E 2 -I /global/scratch/gregoryowens/sebastes/snp_calling/{reference_species}_scaffolded/{species1}/genmap -O /global/scratch/gregoryowens/sebastes/snp_calling/{reference_species}_scaffolded/{species1}/genmap_k50-2 -bg ;

            cat /global/scratch/gregoryowens/sebastes/snp_calling/{reference_species}_scaffolded/{species1}/genmap_k50-2.bedgraph | perl /global/scratch/gregoryowens/sebastes/bin/filter_mappability_bed.pl 50 > {mask_1};
            cat /global/scratch/gregoryowens/sebastes/snp_calling/{reference_species}_scaffolded/{species1}/genmap_k50-2.bedgraph | perl /global/scratch/gregoryowens/sebastes/bin/filter_mappability_bed.pl 100 > {mask_2};
            cat /global/scratch/gregoryowens/sebastes/snp_calling/{reference_species}_scaffolded/{species1}/genmap_k50-2.bedgraph | perl /global/scratch/gregoryowens/sebastes/bin/filter_mappability_bed.pl 5 > {mask_3};
           """.format( out_dir=out_dir, reference_species=wildcards.reference_species, 
                       species1=wildcards.species1, mask_1=output.mask_1,
                       mask_2=output.mask_2, mask_3=output.mask_3 ))
