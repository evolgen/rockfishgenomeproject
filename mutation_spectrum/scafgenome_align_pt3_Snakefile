#!python

#!/usr/bin/env python3
import os
import sys
from glob import glob
from snakemake.utils import read_job_properties
import pdb

configfile:"config.itemized.withpball.withillumina.json"
genome_dir = "/global/scratch2/rohitkolora/Rockfish/Genomes/FREEZE"
out_dir = "/global/scratch/gregoryowens/sebastes/snp_calling"
bam_dir = "/global/scratch2/rohitkolora/Rockfish/Data/Greg/snp_calling"

def get_inputs(wildcards):
    inputs = []
    pattern = "{bam_dir}/aleutianus_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.msmcinput.txt"
    pattern2 ="{bam_dir}/aleutianus_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.het.txt"
    for smp in config["SAMPLES"]:
        species1, sample1 = smp.split("/")
        if species1 != "Sebastes_aleutianus":
            fn = "/global/scratch2/rohitkolora/Rockfish/Data/Greg/snp_calling/aleutianus_scaffolded/{species1}/referencegenome.fasta.fai".format(species1=species1)
            index_file=open(fn,"r")
            lines=index_file.readlines()
            for names in lines:
                chroms=names.split('\t')[0]
                length=names.split('\t')[1]
                if int(length) >= 1000000:
                    inputs.append(pattern.format(species1=species1, 
                        smp=smp,  sample1=sample1, bam_dir=bam_dir, chr=chroms,))
                    inputs.append(pattern2.format(species1=species1,
                        smp=smp,  sample1=sample1, bam_dir=bam_dir, chr=chroms,))
            index_file.close() 

    return inputs

rule all:
    input:
        get_inputs

rule format_for_msmc:
    input:
        coverage_mask="{bam_dir}/aleutianus_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.mask.bed.gz",
        kmer_mask="/global/scratch/gregoryowens/sebastes/snp_calling/aleutianus_scaffolded/{species1}/k50-2_50bp_negativemask.bed",
        vcf="{bam_dir}/aleutianus_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.vcf.gz",
    output:
        out_msmc="{bam_dir}/aleutianus_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.msmcinput.txt",
    params:
        slurm_opts=lambda wildcards: "-N1 " \
                                     "--time 24:00:00 " \
                                    "-A co_genomicdata " \
                                     "--qos=savio_lowprio " \
                                     "-p savio3 " \
                                     "-o {out_dir}/logs/format_{sp1}_{chr}.log " \
                                     "-J {sp1}_format " \
                                     .format(sp1=wildcards.species1, out_dir=out_dir, chr=wildcards.chr)
    run:
        shell("""
            /global/scratch/gregoryowens/sebastes/bin/msmc-tools/generate_multihetsep.py --mask {coverage_mask} --negative_mask {kmer_mask} {vcf} > {out_msmc}
            """.format(coverage_mask=input.coverage_mask, kmer_mask=input.kmer_mask, vcf=input.vcf,out_msmc=output.out_msmc,
                       ))

rule measure_het:
    input:
        vcf="{bam_dir}/aleutianus_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.vcf.gz",
        negative_mask="/global/scratch/gregoryowens/sebastes/snp_calling/aleutianus_scaffolded/{species1}/k50-2_50bp_negativemask.bed",
        called_regions="{bam_dir}/aleutianus_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.mask.bed.gz",
    output:
        callable_regions="{bam_dir}/aleutianus_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.callable.bed.gz",
        het="{bam_dir}/aleutianus_scaffolded/{species1}/Illumina/{chr}/map.{species1}.{sample1}.het.txt",

    params:
        slurm_opts=lambda wildcards: "-N1 " \
                                     "--time 24:00:00 " \
                                    "-A co_genomicdata " \
                                     "--qos=savio_lowprio " \
                                     "-p savio3 " \
                                     "-o {out_dir}/logs/het_{sp1}_{chr}.log " \
                                     "-J {sp1}_het " \
                                     .format(sp1=wildcards.species1, out_dir=out_dir, chr=wildcards.chr)
    run:
        shell("""
            module load bedtools;
            bedtools subtract -a {called_regions} -b {negative_mask} | gzip -c > {callable_regions};

            BASES=$(zcat {callable_regions} | bash /global/scratch/gregoryowens/sebastes/bin/sum_bed.sh);

            HET=$(bedtools intersect -a {vcf} -b {callable_regions} | grep "0/1" | wc -l);
            echo "aleutianus_scaffolded\t{species1}\t{sample1}\t{chr}\t$BASES\t$HET" > {het};


            """.format(vcf=input.vcf, negative_mask=input.negative_mask,
                        called_regions=input.called_regions,
                        callable_regions=output.callable_regions,
                        het=output.het,
                        species1=wildcards.species1,
                        sample1=wildcards.sample1,chr=wildcards.chr,))


